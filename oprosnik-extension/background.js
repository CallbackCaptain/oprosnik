/**
 * background.js - –í–µ—Ä—Å–∏—è —Å –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
 * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ background service worker
 */

console.log('üöÄ Background Service Worker —Å –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∑–∞–ø—É—â–µ–Ω');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–Ω–µ –∫–ª–∞—Å—Å–∞)
function extractAgentStatus() {
    const statusEl = document.querySelector('#voice-state-select-headerOptionText');
    return {
        status: statusEl ? statusEl.textContent.trim() : null,
        timestamp: Date.now()
    };
}

function extractCallData() {
    const data = {
        phone: null,
        duration: null,
        region: null,
        timestamp: Date.now()
    };
    
    // –ò—â–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const phoneEl = document.querySelector('[aria-label*="–£—á–∞—Å—Ç–Ω–∏–∫"]');
    if (phoneEl) {
        data.phone = phoneEl.textContent.trim();
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ - –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
    const timerSelectors = [
        '[role="timer"]',
        '[class*="timer-timer"]',
        '[id*="call-timer"]',
        '[aria-label*="–û–±—â–µ–µ –≤—Ä–µ–º—è"]'
    ];
    
    for (const selector of timerSelectors) {
        const timerEl = document.querySelector(selector);
        if (timerEl && timerEl.textContent.trim()) {
            const timerText = timerEl.textContent.trim();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–°)
            if (/\d{2}:\d{2}:\d{2}/.test(timerText)) {
                data.duration = timerText;
                console.log(`‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä ${selector}: ${timerText}`);
                break;
            }
        }
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤ aria-label
    if (!data.duration) {
        const allElements = document.querySelectorAll('[aria-label*="–≤—Ä–µ–º—è"]');
        for (const el of allElements) {
            const ariaLabel = el.getAttribute('aria-label');
            const timeMatch = ariaLabel.match(/(\d{2}:\d{2}:\d{2})/);
            if (timeMatch) {
                data.duration = timeMatch[1];
                console.log(`‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞–π–¥–µ–Ω–æ –≤ aria-label: ${data.duration}`);
                break;
            }
        }
    }
    
    // –ò—â–µ–º —Ä–µ–≥–∏–æ–Ω –≤ call variable value
    const regionEl = document.querySelector('[class*="callVariableValue"] span');
    if (regionEl) {
        data.region = regionEl.textContent.trim();
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ id
    if (!data.region) {
        const regionAltEl = document.querySelector('[id*="call-header-variable-value"]');
        if (regionAltEl) {
            data.region = regionAltEl.textContent.trim();
        }
    }
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
        phone: data.phone,
        duration: data.duration,
        region: data.region,
        foundTimerElements: document.querySelectorAll('[role="timer"], [class*="timer"], [id*="timer"]').length
    });
    
    return data;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Finesse
class FinesseActiveMonitor {
    constructor() {
        this.finesseTabId = null;
        this.monitoringActive = false;
        this.currentCallData = null;
        this.callHistory = [];
        this.lastAgentStatus = null;
        this.isInCall = false;
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.statusCheckInterval = 3000; // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫
        this.activeCallInterval = 1000;  // –í–æ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        
        this.init();
    }
    
    async init() {
        console.log('üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FinesseActiveMonitor...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.loadStoredData();
        
        // –ù–∞—Ö–æ–¥–∏–º –≤–∫–ª–∞–¥–∫—É Finesse
        await this.findFinesseTab();
        
        // –°–æ–∑–¥–∞–µ–º alarm –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        chrome.alarms.create('finesseStatusCheck', {
            periodInMinutes: 0.05 // –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
        });
        
        // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
        chrome.tabs.onUpdated.addListener(this.handleTabUpdate.bind(this));
        chrome.tabs.onRemoved.addListener(this.handleTabRemoved.bind(this));
    }
    
    async findFinesseTab() {
        const tabs = await chrome.tabs.query({
            url: "https://ssial000ap008.si.rt.ru:8445/desktop/container/*"
        });
        
        if (tabs.length > 0) {
            this.finesseTabId = tabs[0].id;
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ Finesse:', this.finesseTabId);
            this.monitoringActive = true;
            return true;
        }
        
        console.log('‚ùå –í–∫–ª–∞–¥–∫–∞ Finesse –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        this.monitoringActive = false;
        return false;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
    handleTabUpdate(tabId, changeInfo, tab) {
        if (tabId === this.finesseTabId && changeInfo.status === 'complete') {
            console.log('üîÑ –í–∫–ª–∞–¥–∫–∞ Finesse –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            setTimeout(() => this.checkAgentStatus(), 3000);
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∫–ª–∞–¥–æ–∫
    handleTabRemoved(tabId) {
        if (tabId === this.finesseTabId) {
            console.log('‚ùå –í–∫–ª–∞–¥–∫–∞ Finesse –∑–∞–∫—Ä—ã—Ç–∞');
            this.finesseTabId = null;
            this.monitoringActive = false;
        }
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞
    async checkAgentStatus() {
        if (!this.monitoringActive || !this.finesseTabId) {
            await this.findFinesseTab();
            if (!this.finesseTabId) return;
        }
        
        try {
            const results = await chrome.scripting.executeScript({
                target: { tabId: this.finesseTabId },
                func: extractAgentStatus,
                world: 'MAIN'
            });
            
            if (results && results[0] && results[0].result) {
                await this.processStatusData(results[0].result);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:', error);
            this.monitoringActive = false;
        }
    }
    
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞
    async processStatusData(data) {
        if (!data.status) return;
        
        const currentStatus = data.status;
        const previousStatus = this.lastAgentStatus;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if (currentStatus !== previousStatus) {
            console.log(`üìû –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: ${previousStatus} ‚Üí ${currentStatus}`);
            
            // –ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if (currentStatus === '–†–∞–∑–≥–æ–≤–æ—Ä' && !this.isInCall) {
                console.log('üîî –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫!');
                this.isInCall = true;
                this.startActiveCallMonitoring();
            }
            
            // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
            if (previousStatus === '–†–∞–∑–≥–æ–≤–æ—Ä' && currentStatus === '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ') {
                console.log('‚òéÔ∏è –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è...');
                this.startPostCallCapture();
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å—Ç–∞—Ç—É—Å "–ì–æ—Ç–æ–≤" –ø–æ—Å–ª–µ –∑–≤–æ–Ω–∫–∞
            if (previousStatus === '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ' && currentStatus === '–ì–æ—Ç–æ–≤') {
                console.log('‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –∑–≤–æ–Ω–∫–∞–º');
                // –î–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç–∞—Ç—É—Å–µ "–ì–æ—Ç–æ–≤"
                // –í —ç—Ç–æ–º —Å—Ç–∞—Ç—É—Å–µ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â—ë –¥–æ—Å—Ç—É–ø–Ω—ã
                setTimeout(async () => {
                    console.log('üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –≤ —Å—Ç–∞—Ç—É—Å–µ "–ì–æ—Ç–æ–≤"');
                    await this.captureCallData();
                }, 500);
            }
            
            this.lastAgentStatus = currentStatus;
        }
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–≤–æ–Ω–∫–∞
    startActiveCallMonitoring() {
        console.log('üéØ –ó–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–≤–æ–Ω–∫–∞');
        
        // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π alarm
        chrome.alarms.create('activeCallMonitor', {
            periodInMinutes: 0.0167 // –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        });
        
        // –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–∞—Ö–≤–∞—Ç
        this.captureCallData();
    }
    
    // –ó–∞—Ö–≤–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
    async captureCallData() {
        if (!this.finesseTabId) return;
        
        try {
            const results = await chrome.scripting.executeScript({
                target: { tabId: this.finesseTabId },
                func: extractCallData,
                world: 'MAIN'
            });
            
            if (results && results[0] && results[0].result) {
                const callData = results[0].result;
                if (callData.phone || callData.duration) {
                    this.currentCallData = callData;
                    console.log('üìä –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', callData);
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞:', error);
        }
    }
    
    
    // –ü–æ—Å—Ç-–∑–≤–æ–Ω–∫–æ–≤—ã–π –∑–∞—Ö–≤–∞—Ç (–±—ã—Å—Ç—Ä–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    async startPostCallCapture() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç-–∑–≤–æ–Ω–∫–æ–≤–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞');
        
        this.isInCall = false;
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        chrome.alarms.clear('activeCallMonitor');
        
        // –î–µ–ª–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞—Ö–≤–∞—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        let captureAttempts = 0;
        const maxAttempts = 4; // –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 4 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        
        const attemptCapture = async () => {
            captureAttempts++;
            console.log(`üì∏ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ ${captureAttempts}/${maxAttempts}`);
            
            const previousData = this.currentCallData ? {...this.currentCallData} : null;
            await this.captureCallData();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            const hasValidDuration = this.currentCallData?.duration && 
                                   this.currentCallData.duration !== '00:00:00' &&
                                   /\d{2}:\d{2}:\d{2}/.test(this.currentCallData.duration);
            
            const dataChanged = !previousData || 
                                previousData.duration !== this.currentCallData?.duration ||
                                previousData.phone !== this.currentCallData?.phone;
            
            // –§–∏–∫—Å–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if (hasValidDuration && dataChanged) {
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ñ–∏–∫—Å–∏—Ä—É–µ–º:', this.currentCallData.duration);
                await this.finalizeCall();
                return;
            }
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Ñ–∏–∫—Å–∏—Ä—É–µ–º —á—Ç–æ –µ—Å—Ç—å
            if (captureAttempts >= maxAttempts) {
                console.log('‚è∞ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏–º–µ—é—â–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ');
                if (!hasValidDuration) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞');
                }
                await this.finalizeCall();
                return;
            }
            
            // –î–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            setTimeout(attemptCapture, 300); // –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
        };
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏, —á—Ç–æ–±—ã –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
        setTimeout(attemptCapture, 150);
    }
    
    // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
    async finalizeCall() {
        if (!this.currentCallData) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
            return;
        }
        
        console.log('üíæ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞:', this.currentCallData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        const finalCallData = {
            ...this.currentCallData,
            completedAt: new Date().toISOString(),
            savedAt: Date.now()
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.callHistory.unshift(finalCallData);
        if (this.callHistory.length > 10) {
            this.callHistory = this.callHistory.slice(0, 10);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ chrome.storage
        await this.saveData();
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.currentCallData = null;
        
        console.log('‚úÖ –ó–≤–æ–Ω–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é');
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ chrome.storage
    async saveData() {
        try {
            await chrome.storage.local.set({
                callHistory: this.callHistory,
                lastCallData: this.callHistory[0] || null,
                lastAgentStatus: this.lastAgentStatus,
                lastUpdate: Date.now()
            });
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ storage');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async loadStoredData() {
        try {
            const data = await chrome.storage.local.get([
                'callHistory', 
                'lastAgentStatus'
            ]);
            
            if (data.callHistory) {
                this.callHistory = data.callHistory;
                console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è: ${this.callHistory.length} –∑–≤–æ–Ω–∫–æ–≤`);
            }
            
            if (data.lastAgentStatus) {
                this.lastAgentStatus = data.lastAgentStatus;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∞
const monitor = new FinesseActiveMonitor();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ alarm —Å–æ–±—ã—Ç–∏–π
chrome.alarms.onAlarm.addListener(async (alarm) => {
    if (alarm.name === 'finesseStatusCheck') {
        await monitor.checkAgentStatus();
    } else if (alarm.name === 'activeCallMonitor') {
        await monitor.captureCallData();
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç content scripts
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', request.action);
    
    if (request.action === 'getCallData') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        sendResponse({
            status: 'success',
            data: monitor.callHistory
        });
        return true;
    }
    
    if (request.action === 'test') {
        sendResponse({ 
            status: 'success', 
            message: 'Background service —Ä–∞–±–æ—Ç–∞–µ—Ç',
            monitorActive: monitor.monitoringActive,
            historyCount: monitor.callHistory.length
        });
        return true;
    }
});

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
globalThis.monitorStatus = async function() {
    console.group('üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    console.log('–ê–∫—Ç–∏–≤–µ–Ω:', monitor.monitoringActive);
    console.log('Tab ID:', monitor.finesseTabId);
    console.log('–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞—Ç—É—Å:', monitor.lastAgentStatus);
    console.log('–í –∑–≤–æ–Ω–∫–µ:', monitor.isInCall);
    console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:', monitor.currentCallData);
    console.log('–ò—Å—Ç–æ—Ä–∏—è:', monitor.callHistory.length, '–∑–≤–æ–Ω–∫–æ–≤');
    console.groupEnd();
};

globalThis.forceCheck = async function() {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    await monitor.checkAgentStatus();
};

console.log('‚úÖ Background Service Worker –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
console.log('üí° –ö–æ–º–∞–Ω–¥—ã: monitorStatus(), forceCheck()');