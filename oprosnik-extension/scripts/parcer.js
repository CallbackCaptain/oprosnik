/**
 * parser.js - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 * –≠—Ç–∞ –≤–µ—Ä—Å–∏—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–æ–∑–¥–∞—Å—Ç –æ–±—ä–µ–∫—Ç _oprosnikHelper
 */

// –°—Ä–∞–∑—É –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
console.log('üöÄ Parser.js: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞...', new Date().toISOString());

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
console.log('üìç URL:', window.location.href);
console.log('üîå Chrome API:', typeof chrome !== 'undefined' && chrome.runtime ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω');

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å—Ä–∞–∑—É, –±–µ–∑ –∫–ª–∞—Å—Å–æ–≤
try {
    window._oprosnikHelper = {
        version: 'minimal-1.0',
        initialized: false,
        lastEndedCallData: null,
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        setTestData: function() {
            const testData = {
                phone: '89991234567',
                duration: '00:03:45',
                region: '–¢–ï–°–¢_–†–ï–ì–ò–û–ù',
                capturedAt: new Date().toLocaleTimeString()
            };
            
            this.lastEndedCallData = testData;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
            try {
                localStorage.setItem('oprosnik_last_call', JSON.stringify({
                    ...testData,
                    savedAt: Date.now()
                }));
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', testData);
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
            }
            
            return testData;
        },
        
        // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ
        getLastCall: function() {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–µ—Ä–Ω—É—Ç—å –∏–∑ –ø–∞–º—è—Ç–∏
            if (this.lastEndedCallData) {
                return this.lastEndedCallData;
            }
            
            // –ü–æ—Ç–æ–º –∏–∑ localStorage
            try {
                const stored = localStorage.getItem('oprosnik_last_call');
                if (stored) {
                    const data = JSON.parse(stored);
                    console.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:', data);
                    return data;
                }
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', e);
            }
            
            return null;
        },
        
        // –ù–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        findCallElements: function() {
            console.group('üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–≤–æ–Ω–∫–∞');
            
            const selectors = {
                '–°—Ç–∞—Ç—É—Å': ['#voice-state-select-headerOptionText', '[id*="state"]', '[class*="state"]'],
                '–¢–µ–ª–µ—Ñ–æ–Ω': ['[aria-label*="–£—á–∞—Å—Ç–Ω–∏–∫"]', '[class*="participant"]', '[class*="phone"]'],
                '–¢–∞–π–º–µ—Ä': ['[role="timer"]', '[class*="timer"]', '[id*="timer"]'],
                '–†–µ–≥–∏–æ–Ω': ['[class*="variable"]', '[class*="region"]']
            };
            
            for (const [name, selectorList] of Object.entries(selectors)) {
                console.log(`\n${name}:`);
                for (const selector of selectorList) {
                    try {
                        const elements = document.querySelectorAll(selector);
                        if (elements.length > 0) {
                            console.log(`  ‚úÖ ${selector}: –Ω–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
                            if (elements[0].textContent) {
                                console.log(`     –ü—Ä–∏–º–µ—Ä: "${elements[0].textContent.trim().substring(0, 50)}"`);
                            }
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
                    }
                }
            }
            
            console.groupEnd();
        },
        
        // –°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        getStatus: function() {
            return {
                version: this.version,
                initialized: this.initialized,
                hasData: !!this.lastEndedCallData,
                chromeAPI: typeof chrome !== 'undefined' && chrome.runtime
            };
        }
    };
    
    console.log('‚úÖ –û–±—ä–µ–∫—Ç _oprosnikHelper —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
    console.log('   window._oprosnikHelper.setTestData()     - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('   window._oprosnikHelper.getLastCall()     - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ');
    console.log('   window._oprosnikHelper.findCallElements() - –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
    console.log('   window._oprosnikHelper.getStatus()       - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
    
} catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ _oprosnikHelper:', error);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
if (chrome && chrome.runtime && chrome.runtime.onMessage) {
    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
        console.log('üì® Parser –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:', request.action);
        
        if (request.action === 'ping') {
            sendResponse({ 
                status: 'pong', 
                message: 'Parser (minimal) –∞–∫—Ç–∏–≤–µ–Ω',
                version: window._oprosnikHelper?.version || 'unknown'
            });
            return true;
        }
        
        if (request.action === 'parseCallData') {
            const data = window._oprosnikHelper?.getLastCall();
            
            if (data) {
                console.log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ:', data);
                sendResponse({ status: 'success', data: data });
            } else {
                console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
                sendResponse({ 
                    status: 'error', 
                    message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window._oprosnikHelper.setTestData() –¥–ª—è —Ç–µ—Å—Ç–∞'
                });
            }
        }
        
        return true;
    });
    
    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
} else {
    console.error('‚ùå Chrome API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
}

// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
setTimeout(() => {
    if (window._oprosnikHelper) {
        console.log('‚úÖ PARSER.JS –ó–ê–ì–†–£–ñ–ï–ù –£–°–ü–ï–®–ù–û. –û–±—ä–µ–∫—Ç _oprosnikHelper –¥–æ—Å—Ç—É–ø–µ–Ω.');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        try {
            const indicator = document.createElement('div');
            indicator.style.cssText = `
                position: fixed;
                bottom: 20px;
                right: 20px;
                padding: 10px 15px;
                background: #4CAF50;
                color: white;
                border-radius: 5px;
                font-size: 14px;
                z-index: 99999;
            `;
            indicator.textContent = '‚úÖ Parser Minimal –∑–∞–≥—Ä—É–∂–µ–Ω';
            document.body.appendChild(indicator);
            setTimeout(() => indicator.remove(), 5000);
        } catch (e) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:', e);
        }
    } else {
        console.error('‚ùå –û–®–ò–ë–ö–ê: _oprosnikHelper –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω!');
    }
}, 100);