/**
 * parser.js - –í–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π –∑–≤–æ–Ω–∫–æ–≤
 * –í–µ—Ä—Å–∏—è: 2.1
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ-–∏—Å—Ç–æ—á–Ω–∏–∫–µ. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
 * –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ localStorage.
 */

console.log('üöÄ Oprosnik Helper: Parser Script –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', {
    timestamp: new Date().toISOString(),
    url: window.location.href,
    extensionId: chrome.runtime?.id,
    version: '2.1'
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Chrome API
if (!chrome || !chrome.runtime) {
    console.error('‚ùå Parser: Chrome API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
} else {
    console.log('‚úÖ Parser: Chrome API –¥–æ—Å—Ç—É–ø–µ–Ω');
}

class CallEndTracker {
    constructor() {
        // –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
        this.lastEndedCallData = null;
        
        // –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤ (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        this.callHistory = [];
        this.maxHistorySize = 5;
        
        // –°—Ç–∞—Ç—É—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        this.endCallStatuses = ['–ü–æ—Å—Ç–≤—ã–∑–æ–≤', '–ì–æ—Ç–æ–≤', 'Ready', 'Not Ready', 'Wrap Up'];
        
        // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
        this.previousAgentStatus = null;
        
        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        this.stats = {
            statusChanges: 0,
            callsTracked: 0,
            saveAttempts: 0,
            saveErrors: 0
        };
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        this.testData = {
            phone: '89991234567',
            duration: '00:00:00',
            region: '–¢–ï–°–¢',
            capturedAt: new Date().toLocaleTimeString()
        };

        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏.
     */
    init() {
        console.log('üì° CallTracker: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window._oprosnikHelper = {
            tracker: this,
            getLastCall: () => this.getLastCallData(),
            getCallHistory: () => this.callHistory,
            getStats: () => this.stats,
            setTestData: () => {
                this.lastEndedCallData = this.testData;
                this.saveToLocalStorage(this.testData);
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:', this.testData);
                return this.testData;
            },
            findCallElements: () => this.debugFindElements(),
            // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            saveCurrentData: () => {
                if (this.lastEndedCallData) {
                    this.saveToLocalStorage(this.lastEndedCallData);
                    return '–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã';
                }
                return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è';
            }
        };
        
        console.log('üí° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:');
        console.log('   window._oprosnikHelper.setTestData() - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        console.log('   window._oprosnikHelper.getLastCall() - –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫');
        console.log('   window._oprosnikHelper.getCallHistory() - –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–≤–æ–Ω–∫–æ–≤');
        console.log('   window._oprosnikHelper.saveCurrentData() - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.loadFromLocalStorage();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
        this.startStatusMonitoring();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        this.showVisualIndicator();
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
     */
    startStatusMonitoring() {
        let attempts = 0;
        const maxAttempts = 30; // 15 —Å–µ–∫—É–Ω–¥
        
        const waitForStatusElement = setInterval(() => {
            attempts++;
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            const statusSelectors = [
                '#voice-state-select-headerOptionText',
                '[id*="voice-state"]',
                '[id*="agent-state"]',
                '.agent-state-select',
                '[class*="state-select"]',
                '[class*="voice-state"]'
            ];
            
            let statusContainer = null;
            for (const selector of statusSelectors) {
                statusContainer = document.querySelector(selector);
                if (statusContainer && statusContainer.textContent) {
                    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                    break;
                }
            }
            
            if (statusContainer) {
                clearInterval(waitForStatusElement);
                console.log('‚úÖ CallTracker: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–π–¥–µ–Ω');
                console.log('   –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', statusContainer.textContent.trim());

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                this.previousAgentStatus = statusContainer.textContent.trim();

                // –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å
                const observer = new MutationObserver(() => {
                    this.handleStatusChange(statusContainer);
                });

                observer.observe(statusContainer, {
                    characterData: true,
                    childList: true,
                    subtree: true,
                    attributes: true,
                    attributeFilter: ['textContent', 'innerText']
                });
                
                console.log('‚úÖ CallTracker: MutationObserver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                
            } else if (attempts >= maxAttempts) {
                clearInterval(waitForStatusElement);
                console.error('‚ùå CallTracker: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ', maxAttempts, '–ø–æ–ø—ã—Ç–æ–∫');
                this.stats.errors++;
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                this.debugFindElements();
            } else if (attempts % 10 === 0) {
                console.log(`‚è≥ –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞... –ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}`);
            }
        }, 500);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
     */
    handleStatusChange(statusContainer) {
        const currentStatus = statusContainer.textContent.trim();
        const previousStatus = this.previousAgentStatus;

        if (currentStatus !== previousStatus) {
            this.stats.statusChanges++;
            console.log(`üìû CallTracker: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è —Å "${previousStatus}" –Ω–∞ "${currentStatus}"`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
            if (!this.endCallStatuses.some(s => previousStatus.includes(s)) && 
                this.endCallStatuses.some(s => currentStatus.includes(s))) {
                console.log('‚òéÔ∏è CallTracker: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞! –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...');
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                setTimeout(() => this.captureLastCallData(), 500);
            }

            this.previousAgentStatus = currentStatus;
        }
    }

    /**
     * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–µ.
     */
    captureLastCallData() {
        console.log('üìä –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–µ...');
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–≤–æ–Ω–∫–∞
        const containerSelectors = [
            '.callcontrol-grid-cell-NIrSA',
            '[class^="callcontrol-grid-cell-"]',
            '[class*="callcontrol-grid-cell"]',
            '[class*="call-control"]',
            '[class*="active-call"]',
            '.call-info',
            '#call-info-panel'
        ];
        
        let callContainer = null;
        for (const selector of containerSelectors) {
            callContainer = document.querySelector(selector);
            if (callContainer) {
                console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                break;
            }
        }
        
        if (!callContainer) {
            console.error('‚ùå CallTracker: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–≤–æ–Ω–∫–∞');
            this.stats.errors++;
            this.debugFindElements();
            return;
        }
        
        // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å –ø–æ–º–æ—â—å—é –≥–∏–±–∫–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
        const phoneEl = this.findElementBySelectors(callContainer, [
            '[aria-label*="–£—á–∞—Å—Ç–Ω–∏–∫"]',
            '[aria-label*="—É—á–∞—Å—Ç–Ω–∏–∫"]',
            '[aria-label*="Caller"]',
            '[aria-label*="Phone"]',
            '[class*="participant"]',
            '[class*="phone-number"]',
            '.callcontrol-participant-number'
        ]);
        
        const durationEl = this.findElementBySelectors(callContainer, [
            '[role="timer"]',
            '[class*="timer"]',
            '[class*="duration"]',
            '.call-timer',
            '#call-timer'
        ]);
        
        const regionEl = this.findElementBySelectors(callContainer, [
            '.callcontrol-callVariableValue-290jv span',
            '[class^="callcontrol-callVariableValue"] span',
            '[class*="callVariableValue"] span',
            '[class*="call-variable"]',
            '[class*="region"]',
            '.call-info-value'
        ]);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const phone = phoneEl?.textContent?.trim() || '–ù–µ –Ω–∞–π–¥–µ–Ω';
        const duration = durationEl?.textContent?.trim() || '–ù–µ –Ω–∞–π–¥–µ–Ω–∞';
        const region = regionEl?.textContent?.trim() || '–ù–µ –Ω–∞–π–¥–µ–Ω';

        const callData = {
            phone: phone,
            duration: duration,
            region: region,
            capturedAt: new Date().toLocaleTimeString(),
            capturedDate: new Date().toISOString()
        };

        this.lastEndedCallData = callData;
        console.log('‚úÖ CallTracker: –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã:', callData);
        this.stats.callsTracked++;
        
        // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –∏ –∏—Å—Ç–æ—Ä–∏—é
        this.saveToLocalStorage(callData);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        this.showNotification('–î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }
    
    /**
     * –ò—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–ø–∏—Å–∫—É —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
     */
    findElementBySelectors(container, selectors) {
        for (const selector of selectors) {
            try {
                const element = container.querySelector(selector);
                if (element && element.textContent) {
                    console.log(`  ‚úì –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É: ${selector}`);
                    return element;
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
            }
        }
        return null;
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ localStorage —Å –∏—Å—Ç–æ—Ä–∏–µ–π
     */
    saveToLocalStorage(data) {
        console.log('üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage...');
        this.stats.saveAttempts++;
        
        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const dataWithMeta = {
                ...data,
                savedAt: Date.now(),
                extensionVersion: '2.1'
            };
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫
            localStorage.setItem('oprosnik_last_call', JSON.stringify(dataWithMeta));
            console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.callHistory.unshift(dataWithMeta); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if (this.callHistory.length > this.maxHistorySize) {
                this.callHistory = this.callHistory.slice(0, this.maxHistorySize);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            localStorage.setItem('oprosnik_call_history', JSON.stringify(this.callHistory));
            console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é. –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${this.callHistory.length}`);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('üì¶ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', dataWithMeta);
            console.log('üìö –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤:', this.callHistory);
            
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', e);
            this.stats.saveErrors++;
            
            // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö–æ—Ç—è –±—ã –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫
            try {
                localStorage.setItem('oprosnik_last_call_backup', JSON.stringify(data));
                console.log('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
            } catch (e2) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e2);
            }
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
     */
    loadFromLocalStorage() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫
            const lastCall = localStorage.getItem('oprosnik_last_call');
            if (lastCall) {
                this.lastEndedCallData = JSON.parse(lastCall);
                console.log('üíæ –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫:', this.lastEndedCallData);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            const history = localStorage.getItem('oprosnik_call_history');
            if (history) {
                this.callHistory = JSON.parse(history);
                console.log(`üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤: ${this.callHistory.length} –∑–∞–ø–∏—Å–µ–π`);
            }
            
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ localStorage:', e);
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
     */
    getLastCallData() {
        return this.lastEndedCallData;
    }
    
    /**
     * –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
     */
    debugFindElements() {
        console.group('üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        
        // –ò—â–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        const patterns = ['call', 'phone', 'timer', 'participant', 'voice', 'agent'];
        patterns.forEach(pattern => {
            const elements = document.querySelectorAll(`[class*="${pattern}"], [id*="${pattern}"]`);
            if (elements.length > 0) {
                console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "${pattern}":`, elements.length);
                elements.forEach((el, i) => {
                    if (i < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        console.log(`  - ${el.tagName}.${el.className || el.id}:`, 
                                   el.textContent?.substring(0, 50));
                    }
                });
            }
        });
        
        console.groupEnd();
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
     */
    showVisualIndicator() {
        try {
            const indicator = document.createElement('div');
            indicator.id = 'oprosnik-helper-indicator';
            indicator.style.cssText = `
                position: fixed;
                bottom: 20px;
                right: 20px;
                background: #4CAF50;
                color: white;
                padding: 10px 15px;
                border-radius: 5px;
                font-size: 14px;
                z-index: 99999;
                cursor: pointer;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                transition: all 0.3s ease;
            `;
            indicator.innerHTML = '‚úÖ Oprosnik Helper –∞–∫—Ç–∏–≤–µ–Ω<br><small>–ö–ª–∏–∫ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏</small>';
            
            indicator.onclick = () => {
                const info = `
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ò–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞: ${this.stats.statusChanges}
- –û—Ç—Å–ª–µ–∂–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: ${this.stats.callsTracked}
- –ü–æ–ø—ã—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${this.stats.saveAttempts}
- –û—à–∏–±–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${this.stats.saveErrors}
- –ó–≤–æ–Ω–∫–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${this.callHistory.length}

–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–≤–æ–Ω–æ–∫:
${this.lastEndedCallData ? JSON.stringify(this.lastEndedCallData, null, 2) : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
                `;
                alert(info);
            };
            
            document.body.appendChild(indicator);
            
            // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                indicator.style.opacity = '0';
                setTimeout(() => indicator.remove(), 300);
            }, 10000);
            
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä:', e);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    showNotification(message) {
        try {
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: #2196F3;
                color: white;
                padding: 15px 20px;
                border-radius: 5px;
                font-size: 14px;
                z-index: 99999;
                box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                animation: slideIn 0.3s ease;
            `;
            notification.textContent = 'üìû ' + message;
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.style.opacity = '0';
                setTimeout(() => notification.remove(), 300);
            }, 3000);
            
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', e);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞
const callTracker = new CallEndTracker();

// –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('üì® Parser: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', request.action);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (request.action === 'ping') {
        console.log('üèì Parser: –û—Ç–≤–µ—á–∞—é –Ω–∞ ping');
        sendResponse({ 
            status: 'pong', 
            message: 'Parser script –∞–∫—Ç–∏–≤–µ–Ω',
            stats: callTracker.stats
        });
        return true;
    }
    
    // –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ –∑–≤–æ–Ω–∫–µ
    if (request.action === 'parseCallData') {
        console.log('üìã Parser: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
        const data = callTracker.getLastCallData();

        if (data) {
            console.log('‚úÖ Parser: –û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ:', data);
            sendResponse({ status: 'success', data: data });
        } else {
            console.log('‚ö†Ô∏è Parser: –î–∞–Ω–Ω—ã–µ –æ –∑–≤–æ–Ω–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            sendResponse({ 
                status: 'error', 
                message: '–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–º –∑–≤–æ–Ω–∫–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∑–≤–æ–Ω–æ–∫.',
                hint: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ window._oprosnikHelper.setTestData() –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
            });
        }
    }
    
    // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
    if (request.action === 'getCallHistory') {
        console.log('üìö Parser: –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤...');
        sendResponse({ 
            status: 'success', 
            history: callTracker.callHistory,
            count: callTracker.callHistory.length
        });
    }
    
    return true;
});

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
`;
document.head.appendChild(style);

console.log('‚úÖ Oprosnik Helper: Parser –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
console.log('üìä URL:', window.location.href);
console.log('üÜî Extension ID:', chrome.runtime?.id);